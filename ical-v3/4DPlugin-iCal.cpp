/* --------------------------------------------------------------------------------
 #
 #  4DPlugin-iCal.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : iCal
 #	author : miyako
 #	2020/03/17
 #  
 # --------------------------------------------------------------------------------*/

#include "4DPlugin-iCal.h"

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#pragma mark Permission

std::mutex mutex_permission;

request_permission_t granted_permission = request_permission_unknown;

BOOL check_permission(PA_ObjectRef status) {
    
    BOOL returnValue = false;
    
    if(status) {
        
        switch (granted_permission) {
                
            case request_permission_authorized:
                returnValue = true;
                ob_set_b(status, L"success", returnValue);
                break;
                
            case request_permission_denied:
                returnValue = false;
                ob_set_b(status, L"success", returnValue);
                ob_set_s(status, L"errorMessage", "permission denied");
                return false;
                break;
                
            case request_permission_restricted:
                returnValue = false;
                ob_set_b(status, L"success", returnValue);
                ob_set_s(status, L"errorMessage", "permission restricted");
                break;
                
            case request_permission_not_determined:
                returnValue = false;
                ob_set_b(status, L"success", returnValue);
                ob_set_s(status, L"errorMessage", "permission not determined");
                break;
                
            default:
                break;
        }
    }
    
    return returnValue;
}

request_permission_t requestPermission(void) {
    
    std::lock_guard<std::mutex> lock(mutex_permission);
    
    if (@available(macOS 10.9, *)) {
        
        switch ([EKEventStore authorizationStatusForEntityType:EKEntityTypeEvent])
        {
            case EKAuthorizationStatusNotDetermined:
            {
                EKEventStore *store = [EKEventStore new];
                [store requestAccessToEntityType:EKEntityTypeEvent completion:^(BOOL granted, NSError * _Nullable error) {
                    if (granted) {
                        granted_permission = request_permission_authorized;
                    }
                }];
                granted_permission = request_permission_not_determined;
                break;
            }
            break;
                
            case EKAuthorizationStatusRestricted:
                granted_permission = request_permission_restricted;
                break;
                
            case EKAuthorizationStatusDenied:
                granted_permission = request_permission_denied;
                break;
                
            case EKAuthorizationStatusAuthorized:
                granted_permission = request_permission_authorized;
                break;
        }

    }
    
    return granted_permission;
}

void iCal_Request_permisson(PA_PluginParameters params) {

    PA_ObjectRef status = PA_CreateObject();
    
    NSBundle *mainBundle = [NSBundle mainBundle];
    if(mainBundle) {
        NSDictionary *infoDictionary = [mainBundle infoDictionary];
        if(infoDictionary) {
            NSString *calendarUsageDescription = [infoDictionary objectForKey:@"NSCalendarsUsageDescription"];
            if(calendarUsageDescription) {
             
                SecTaskRef sec = SecTaskCreateFromSelf(kCFAllocatorMalloc);
                CFErrorRef err = nil;
                CFBooleanRef boolValue = (CFBooleanRef)SecTaskCopyValueForEntitlement(sec,
                                                                                      CFSTR("com.apple.security.personal-information.calendars"),
                                                                                      &err);
                if((!err) && (boolValue)){
                    if(boolValue) {
                        if(CFBooleanGetValue(boolValue)) {
                             
                            PA_RunInMainProcess((PA_RunInMainProcessProcPtr)requestPermission, NULL);
                            
                            check_permission(status);
 
                        }else{
                            ob_set_b(status, L"success", false);
                            ob_set_s(status, L"errorMessage", "com.apple.security.personal-information.calendars is set to false in app entitlement");
                        }
                        CFRelease(boolValue);
                    }
                }else{
                    ob_set_b(status, L"success", false);
                    ob_set_s(status, L"errorMessage", "com.apple.security.personal-information.calendars is missing in app entitlement");
                }
                CFRelease(sec);
            }else{
                ob_set_b(status, L"success", false);
                ob_set_s(status, L"errorMessage", "NScalendarUsageDescription is missing in app info.plist");
            }
        }else{
            ob_set_b(status, L"success", false);
            ob_set_s(status, L"errorMessage", "failed to locate [mainBundle infoDictionary]");
        }
    }else{
        ob_set_b(status, L"success", false);
        ob_set_s(status, L"errorMessage", "failed to locate [NSBundle mainBundle]");
    }
    
    PA_ReturnObject(params, status);
}

#pragma mark -

void PluginMain(PA_long32 selector, PA_PluginParameters params) {
    
	try
	{
        switch(selector)
        {
			// --- iCal
            
			case 1 :
				iCal_Request_permisson(params);
				break;
            case 2 :
                iCal_QUERY_EVENT(params);
                break;
            case 3 :
                iCal_GET_CALENDAR_LIST(params);
                break;
                
            case 4 :
                iCal_Create_calendar(params);
                break;
            case 5 :
                iCal_Set_calendar_property(params);
                break;
            case 6 :
                iCal_Get_calendar_property(params);
                break;
            case 7 :
                iCal_Remove_calendar(params);
                break;
                
            case 8 :
                iCal_Create_event(params);
                break;
            case 9 :
                iCal_Set_event_property(params);
                break;
            case 10 :
                iCal_Get_event_property(params);
                break;
            case 11 :
                iCal_Remove_event(params);
                break;
                
        }

	}
	catch(...)
	{

	}
}

#pragma mark -

NSColor *getRGBcolor(unsigned int rgb) {
    
    NSColor *color = NULL;
    
    CGFloat red, green, blue;
    
    red     = (CGFloat)(((rgb & 0x00FF0000) >> 16  ) / 0xFF);
    green   = (CGFloat)(((rgb & 0x0000FF00) >> 8   ) / 0xFF);
    blue    = (CGFloat)(((rgb & 0x000000FF)        ) / 0xFF);
    
    color = [NSColor colorWithDeviceRed:red
                                  green:green
                                   blue:blue
                                  alpha:1.0f];
    
    return color;
}

unsigned int getColorRGB(NSColor *color) {
    
    unsigned int rgb = 0;
    
    if(color)
    {
        color = [color colorUsingColorSpace:[NSColorSpace displayP3ColorSpace]];
        
        /*
         color = [color colorUsingColorSpace:[NSColorSpace deviceRGBColorSpace]];//NSDeviceRGBColorSpace
         color = [color colorUsingColorSpace:[NSColorSpace sRGBColorSpace]];
         color = [color colorUsingColorSpace:[NSColorSpace genericRGBColorSpace]];//NSCalibratedRGBColorSpace
         */
        
        CGFloat red, green, blue, alpha;
        [color getRed:&red green:&green blue:&blue alpha:&alpha];
        
        rgb +=
        
        /*
         +((unsigned int)(red      * 255.99999f) << 16)
         +((unsigned int)(green    * 255.99999f) << 8)
         + (unsigned int)(blue     * 255.99999f);
         */
        
        +((unsigned int)floor((CGFloat)(red      * 0xFF) + 0.5f) << 16)
        +((unsigned int)floor((CGFloat)(green    * 0xFF) + 0.5f) << 8)
        + (unsigned int)floor((CGFloat)(blue     * 0xFF) + 0.5f);
    }
    
    return rgb;
}

#pragma mark Object, Collection

NSArray *ob_get_calendars(PA_ObjectRef options, CalCalendarStore *calendarStore) {
    
    NSMutableArray *value = nil;
    
    if(options){
        if(calendarStore){
            PA_CollectionRef calendars = ob_get_c(options, L"calendars");
            if(calendars){
                value = [[NSMutableArray alloc]init];
                for(PA_long32 i = 0; i < PA_GetCollectionLength(calendars); ++i){
                    PA_Variable v = PA_GetCollectionElement(calendars, i);
                    if(PA_GetVariableKind(v) == eVK_Object){
                        PA_ObjectRef o = PA_GetObjectVariable(v);
                        if(o){
                            NSString *uid = ob_get_v(o, L"uid");
                            if(uid){
                                CalCalendar *calendar = [calendarStore calendarWithUID:uid];
                                if(calendar){
                                    [value addObject:calendar];
                                }
                            }else{
                                NSString *title = ob_get_v(o, L"title");
                                if(title){
                                    NSArray *_calendars = [calendarStore calendars];
                                    NSPredicate *predicate = [NSPredicate predicateWithFormat:@"title LIKE %@", title];
                                    _calendars = [_calendars filteredArrayUsingPredicate:predicate];
                                    if([_calendars count]){
                                        [value addObject:[_calendars objectAtIndex:0]];
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return value;
}

CalEvent *ob_get_event(PA_ObjectRef options, CalCalendarStore *calendarStore) {
    
    CalEvent *value = nil;
    
    if(options){
        if(calendarStore){
            NSString *uid = ob_get_v(options, L"uid");
            if(uid){
                NSDate *occurrence = ob_get_d(options, L"occurrence");
                value = [calendarStore eventWithUID:uid occurrence:occurrence];
            }
        }
    }
    return value;
}

CalCalendar *ob_get_calendar(PA_ObjectRef options, CalCalendarStore *calendarStore) {
    
    CalCalendar *value = nil;
    
    if(options){
        if(calendarStore){
            NSString *uid = ob_get_v(options, L"uid");
            if(uid){
                value = [calendarStore calendarWithUID:uid];
            }else{
                NSString *title = ob_get_v(options, L"title");
                if(title){
                    NSArray *_calendars = [calendarStore calendars];
                    NSPredicate *predicate = [NSPredicate predicateWithFormat:@"title LIKE %@", title];
                    _calendars = [_calendars filteredArrayUsingPredicate:predicate];
                    if([_calendars count]){
                        value = [_calendars objectAtIndex:0];
                    }
                }
            }
        }
    }
    return value;
}

void ob_set_event_calendar(PA_ObjectRef status, CalEvent *event) {
    
    if(status){
        
        PA_ObjectRef _calendar = PA_CreateObject();
        
        if(event){
            CalCalendar *calendar = event.calendar;
            if(calendar){
                ob_set_v(_calendar, L"title", calendar.title);
                ob_set_v(_calendar, L"uid", calendar.uid);
                ob_set_v(_calendar, L"notes", calendar.notes);
                ob_set_v(_calendar, L"type", calendar.type);
                
                ob_set_b(_calendar, L"isEditable", calendar.isEditable);
                ob_set_n(_calendar, L"color", calendar.color ? getColorRGB(calendar.color) : 0L);
            }
        }
        
        ob_set_o(status, L"calendar", _calendar);
    }
}

void ob_set_event_prop(PA_ObjectRef status, PA_ObjectRef options, CalEvent *event) {
    
    if(status){
        if(options){
            if(event){
                NSDate *startDate = ob_get_d(options, L"startDate");
                NSDate *endDate = ob_get_d(options, L"endDate");
                
                if(startDate){
                    if(endDate){
                        
                        event.startDate = startDate;
                        event.endDate = endDate;
                        
                        NSString *title = ob_get_v(options, L"title");
                        
                        if(title){
                            event.title = title;
                            [title release];
                        }
                        
                        NSString *location = ob_get_v(options, L"location");
                        
                        if(location){
                            event.location = location;
                            [location release];
                        }
                        
                        NSString *notes = ob_get_v(options, L"notes");
                        
                        if(notes){
                            event.notes = notes;
                            [notes release];
                        }
                        
                        if(ob_is_defined(options, L"isAllDay")){
                            event.isAllDay = ob_get_b(options, L"isAllDay");
                        }
                        
                        NSString *url = ob_get_v(options, L"url");
                        
                        if(url){
                            NSURL *_url = [[NSURL alloc]initWithString:url];
                            if(_url){
                                event.url = _url;
                            }
                            [url release];
                        }
                        
                        if(ob_is_defined(options, L"recurrenceRule")){
                            
                            PA_ObjectRef _recurrenceRule = ob_get_o(options, L"recurrenceRule");
                            if(_recurrenceRule){
                                
                                CalRecurrenceType recurrenceType = CalRecurrenceDaily;
                                CalRecurrenceRule *recurrenceRule = nil;
//                                CalRecurrenceEnd *recurrenceEnd = nil;
                                NSDate *endDate = nil;
                                NSUInteger occurrenceCount = 0;
                                NSUInteger recurrenceInterval = 0;
                                NSUInteger dayOfTheWeek = 0;
                                NSUInteger weekOfTheMonth = 0;
                                
                                BOOL usesEndDate = FALSE;
                                
                                if(ob_is_defined(_recurrenceRule, L"recurrenceType")){
                                    recurrenceType = (CalRecurrenceType)ob_get_n(_recurrenceRule, L"recurrenceType");
                                }
                                
                                if(ob_is_defined(_recurrenceRule, L"recurrenceInterval")){
                                    recurrenceInterval = (NSUInteger)ob_get_n(_recurrenceRule, L"recurrenceInterval");
                                }
                                
                                if(ob_is_defined(_recurrenceRule, L"dayOfTheWeek")){
                                    dayOfTheWeek = (NSUInteger)ob_get_n(_recurrenceRule, L"dayOfTheWeek");
                                }
                                
                                if(ob_is_defined(_recurrenceRule, L"weekOfTheMonth")){
                                    weekOfTheMonth = (NSUInteger)ob_get_n(_recurrenceRule, L"weekOfTheMonth");
                                }

                                if(ob_is_defined(_recurrenceRule, L"recurrenceEnd")){
                                    PA_ObjectRef _recurrenceEnd = ob_get_o(_recurrenceRule, L"recurrenceEnd");
                                    if(_recurrenceEnd){
                                        usesEndDate = ob_get_b(_recurrenceEnd, L"usesEndDate");
                                        endDate = ob_get_d(_recurrenceEnd, L"endDate");
                                        occurrenceCount = ob_get_n(_recurrenceEnd, L"occurrenceCount");
                                    }
                                }
                                
                                NSMutableArray *daysOfTheWeek = [[NSMutableArray alloc]init];
                                
                                if(ob_is_defined(_recurrenceRule, L"daysOfTheWeek")){
                                    PA_CollectionRef _daysOfTheWeek = ob_get_c(_recurrenceRule, L"daysOfTheWeek");
                                    if(_daysOfTheWeek){
                                        for(PA_long32 i = 0; i < PA_GetCollectionLength(_daysOfTheWeek); ++i){
                                            PA_Variable v = PA_GetCollectionElement(_daysOfTheWeek, i);
                                            if(PA_GetVariableKind(v) == eVK_Real){
                                                [daysOfTheWeek addObject:[NSNumber numberWithInt:(int)PA_GetRealVariable(v)]];
                                            }
                                        }
                                    }
                                }
                                
                                NSMutableArray *daysOfTheMonth = [[NSMutableArray alloc]init];
                                
                                if(ob_is_defined(_recurrenceRule, L"daysOfTheMonth")){
                                    PA_CollectionRef _daysOfTheMonth = ob_get_c(_recurrenceRule, L"daysOfTheMonth");
                                    if(_daysOfTheMonth){
                                        for(PA_long32 i = 0; i < PA_GetCollectionLength(_daysOfTheMonth); ++i){
                                            PA_Variable v = PA_GetCollectionElement(_daysOfTheMonth, i);
                                            if(PA_GetVariableKind(v) == eVK_Real){
                                                [daysOfTheMonth addObject:[NSNumber numberWithInt:(int)PA_GetRealVariable(v)]];
                                            }
                                        }
                                    }
                                }
                                
                                /*
                                 NSMutableArray *nthWeekDaysOfTheMonth = [[NSMutableArray alloc]init];
                                 
                                 if(ob_is_defined(_recurrenceRule, L"nthWeekDaysOfTheMonth")){
                                     PA_CollectionRef _nthWeekDaysOfTheMonth = ob_get_c(_recurrenceRule, L"nthWeekDaysOfTheMonth");
                                     if(_nthWeekDaysOfTheMonth){
                                         for(PA_long32 i = 0; i < PA_GetCollectionLength(_nthWeekDaysOfTheMonth); ++i){
                                             PA_Variable v = PA_GetCollectionElement(_nthWeekDaysOfTheMonth, i);
                                             if(PA_GetVariableKind(v) == eVK_Real){
                                                 [nthWeekDaysOfTheMonth addObject:[NSNumber numberWithInt:(int)PA_GetRealVariable(v)]];
                                             }
                                         }
                                     }
                                 }
                                 */

                                
                                NSMutableArray *monthsOfTheYear = [[NSMutableArray alloc]init];
                                
                                if(ob_is_defined(_recurrenceRule, L"monthsOfTheYear")){
                                    PA_CollectionRef _monthsOfTheYear = ob_get_c(_recurrenceRule, L"monthsOfTheYear");
                                    if(_monthsOfTheYear){
                                        for(PA_long32 i = 0; i < PA_GetCollectionLength(_monthsOfTheYear); ++i){
                                            PA_Variable v = PA_GetCollectionElement(_monthsOfTheYear, i);
                                            if(PA_GetVariableKind(v) == eVK_Real){
                                                [monthsOfTheYear addObject:[NSNumber numberWithInt:(int)PA_GetRealVariable(v)]];
                                            }
                                        }
                                    }
                                }

                                switch (recurrenceType){
                                    case CalRecurrenceDaily:
                                    {
                                        if(endDate){
                                            recurrenceRule = [[CalRecurrenceRule alloc]initDailyRecurrenceWithInterval:recurrenceInterval
                                                                                                                   end:[CalRecurrenceEnd recurrenceEndWithEndDate:endDate]];
                                        }else{
                                            if(occurrenceCount){
                                                recurrenceRule = [[CalRecurrenceRule alloc]initDailyRecurrenceWithInterval:recurrenceInterval end:[CalRecurrenceEnd recurrenceEndWithOccurrenceCount:occurrenceCount]];
                                            }else{
                                                recurrenceRule = [[CalRecurrenceRule alloc]initDailyRecurrenceWithInterval:recurrenceInterval end:nil];
                                            }
                                        }
                                        event.recurrenceRule = recurrenceRule;
                                        [recurrenceRule release];
                                    }
                                        break;
                                        
                                    case CalRecurrenceWeekly:
                                    {
                                        if([daysOfTheWeek count]){
                                            if(endDate){
                                                recurrenceRule = [[CalRecurrenceRule alloc]initWeeklyRecurrenceWithInterval:recurrenceInterval
                                                                                                           forDaysOfTheWeek:daysOfTheWeek
                                                                                                                        end:[CalRecurrenceEnd recurrenceEndWithEndDate:endDate]];
                                            }else{
                                                if(occurrenceCount){
                                                    recurrenceRule = [[CalRecurrenceRule alloc]initWeeklyRecurrenceWithInterval:recurrenceInterval
                                                                                                               forDaysOfTheWeek:daysOfTheWeek
                                                                                                                            end:[CalRecurrenceEnd recurrenceEndWithOccurrenceCount:occurrenceCount]];
                                                }else{
                                                    recurrenceRule = [[CalRecurrenceRule alloc]initWeeklyRecurrenceWithInterval:recurrenceInterval
                                                                                                               forDaysOfTheWeek:daysOfTheWeek
                                                                                                                            end:nil];
                                                }
                                            }
                                        }else{
                                            if(endDate){
                                                recurrenceRule = [[CalRecurrenceRule alloc]initWeeklyRecurrenceWithInterval:recurrenceInterval
                                                                                                                        end:[CalRecurrenceEnd recurrenceEndWithEndDate:endDate]];
                                            }else{
                                                if(occurrenceCount){
                                                    recurrenceRule = [[CalRecurrenceRule alloc]initWeeklyRecurrenceWithInterval:recurrenceInterval
                                                                                                                            end:[CalRecurrenceEnd recurrenceEndWithOccurrenceCount:occurrenceCount]];
                                                }else{
                                                    recurrenceRule = [[CalRecurrenceRule alloc]initWeeklyRecurrenceWithInterval:recurrenceInterval end:nil];
                                                }
                                            }
                                        }
                                        event.recurrenceRule = recurrenceRule;
                                        [recurrenceRule release];
                                    }
                                        break;
                                        
                                    case CalRecurrenceMonthly:
                                    {
                                        if([daysOfTheMonth count]){
                                            if(endDate){
                                                recurrenceRule = [[CalRecurrenceRule alloc]initMonthlyRecurrenceWithInterval:recurrenceInterval
                                                                                                           forDaysOfTheMonth:daysOfTheMonth
                                                                                                                         end:[CalRecurrenceEnd recurrenceEndWithEndDate:endDate]];
                                            }else{
                                                if(occurrenceCount){
                                                    recurrenceRule = [[CalRecurrenceRule alloc]initMonthlyRecurrenceWithInterval:recurrenceInterval
                                                                                                               forDaysOfTheMonth:daysOfTheMonth
                                                                                                                             end:[CalRecurrenceEnd recurrenceEndWithOccurrenceCount:occurrenceCount]];
                                                }else{
                                                    recurrenceRule = [[CalRecurrenceRule alloc]initMonthlyRecurrenceWithInterval:recurrenceInterval
                                                                                                               forDaysOfTheMonth:daysOfTheMonth end:nil];
                                                }
                                            }
                                        }else{
                                            
                                            if(dayOfTheWeek && weekOfTheMonth){
                                                if(endDate){
                                                    
                                                    
                                                    recurrenceRule = [[CalRecurrenceRule alloc]initMonthlyRecurrenceWithInterval:recurrenceInterval
                                                                                                                 forDayOfTheWeek:dayOfTheWeek
                                                                                                               forWeekOfTheMonth:weekOfTheMonth
                                                                                                                             end:[CalRecurrenceEnd recurrenceEndWithEndDate:endDate]];
                                                }else{
                                                    if(occurrenceCount){
                                                        recurrenceRule = [[CalRecurrenceRule alloc]initMonthlyRecurrenceWithInterval:recurrenceInterval
                                                                                                                     forDayOfTheWeek:dayOfTheWeek
                                                                                                                   forWeekOfTheMonth:weekOfTheMonth
                                                                                                                                 end:[CalRecurrenceEnd recurrenceEndWithOccurrenceCount:occurrenceCount]];
                                                    }else{
                                                        recurrenceRule = [[CalRecurrenceRule alloc]initMonthlyRecurrenceWithInterval:recurrenceInterval
                                                                                                                     forDayOfTheWeek:dayOfTheWeek
                                                                                                                   forWeekOfTheMonth:weekOfTheMonth
                                                                                                                                 end:nil];
                                                    }
                                                }
                                            }else{
                                                if(endDate){
                                                    recurrenceRule = [[CalRecurrenceRule alloc]initMonthlyRecurrenceWithInterval:recurrenceInterval
                                                                                                                             end:[CalRecurrenceEnd recurrenceEndWithEndDate:endDate]];
                                                }else{
                                                    if(occurrenceCount){
                                                        recurrenceRule = [[CalRecurrenceRule alloc]initMonthlyRecurrenceWithInterval:recurrenceInterval
                                                                                                                                 end:[CalRecurrenceEnd recurrenceEndWithOccurrenceCount:occurrenceCount]];
                                                    }else{
                                                        recurrenceRule = [[CalRecurrenceRule alloc]initMonthlyRecurrenceWithInterval:recurrenceInterval
                                                                                                                                 end:nil];
                                                    }
                                                }
                                            }
                                        }
                                        event.recurrenceRule = recurrenceRule;
                                        [recurrenceRule release];
                                    }
                                        break;
                                    case CalRecurrenceYearly:
                                    {
                                        if([monthsOfTheYear count]){
                                            
                                            if(endDate){
                                                recurrenceRule = [[CalRecurrenceRule alloc]initYearlyRecurrenceWithInterval:recurrenceInterval
                                                                                                            forDayOfTheWeek:dayOfTheWeek
                                                                                                          forWeekOfTheMonth:weekOfTheMonth
                                                                                                         forMonthsOfTheYear:monthsOfTheYear
                                                                                                                        end:[CalRecurrenceEnd recurrenceEndWithEndDate:endDate]];
                                            }else{
                                                if(occurrenceCount){
                                                    recurrenceRule = [[CalRecurrenceRule alloc]initYearlyRecurrenceWithInterval:recurrenceInterval
                                                                                                                forDayOfTheWeek:dayOfTheWeek
                                                                                                              forWeekOfTheMonth:weekOfTheMonth
                                                                                                             forMonthsOfTheYear:monthsOfTheYear
                                                                                                                            end:[CalRecurrenceEnd recurrenceEndWithOccurrenceCount:occurrenceCount]];
                                                }else{
                                                    recurrenceRule = [[CalRecurrenceRule alloc]initYearlyRecurrenceWithInterval:recurrenceInterval
                                                                                                                forDayOfTheWeek:dayOfTheWeek
                                                                                                              forWeekOfTheMonth:weekOfTheMonth
                                                                                                             forMonthsOfTheYear:monthsOfTheYear
                                                                                                                            end:nil];
                                                }
                                            }
                                            
                                        }else{
                                            if([monthsOfTheYear count]){
                                                if(endDate){
                                                    recurrenceRule = [[CalRecurrenceRule alloc]initYearlyRecurrenceWithInterval:recurrenceInterval
                                                                                                             forMonthsOfTheYear:monthsOfTheYear
                                                                                                                            end:[CalRecurrenceEnd recurrenceEndWithEndDate:endDate]];
                                                }else{
                                                    if(occurrenceCount){
                                                        recurrenceRule = [[CalRecurrenceRule alloc]initYearlyRecurrenceWithInterval:recurrenceInterval
                                                                                                                 forMonthsOfTheYear:monthsOfTheYear
                                                                                                                                end:[CalRecurrenceEnd recurrenceEndWithOccurrenceCount:occurrenceCount]];
                                                    }else{
                                                        recurrenceRule = [[CalRecurrenceRule alloc]initYearlyRecurrenceWithInterval:recurrenceInterval
                                                                                                                 forMonthsOfTheYear:monthsOfTheYear
                                                                                                                                end:nil];
                                                    }
                                                }
                                            }else{
                                                if(endDate){
                                                    recurrenceRule = [[CalRecurrenceRule alloc]initYearlyRecurrenceWithInterval:recurrenceInterval
                                                                                                                            end:[CalRecurrenceEnd recurrenceEndWithEndDate:endDate]];
                                                }else{
                                                    if(occurrenceCount){
                                                        recurrenceRule = [[CalRecurrenceRule alloc]initYearlyRecurrenceWithInterval:recurrenceInterval
                                                                                                                                end:[CalRecurrenceEnd recurrenceEndWithOccurrenceCount:occurrenceCount]];
                                                    }else{
                                                        recurrenceRule = [[CalRecurrenceRule alloc]initYearlyRecurrenceWithInterval:recurrenceInterval
                                                                                                                                end:nil];
                                                    }
                                                }
                                            }
                                        }
                                        
                                        event.recurrenceRule = recurrenceRule;
                                        [recurrenceRule release];
                                    }
                                        break;
                                }
                                    
                                [daysOfTheWeek release];
                                [daysOfTheMonth release];
//                                [nthWeekDaysOfTheMonth release];
                                [monthsOfTheYear release];
                        }

                        }
                    }else{
                        ob_set_b(status, L"success", false);
                        ob_set_s(status, L"errorMessage", "invalid endDate");
                    }
                }else{
                    ob_set_b(status, L"success", false);
                    ob_set_s(status, L"errorMessage", "invalid startDate");
                }
            }
        }
    }
}

void ob_copy_event(PA_ObjectRef _event, CalEvent *event, BOOL with_calendar = TRUE) {
    
    if(_event){
        if(event){
            ob_set_v(_event, L"uid", event.uid);
            ob_set_v(_event, L"location", event.location);
            ob_set_v(_event, L"notes", event.notes);
            ob_set_v(_event, L"title", event.title);
            
            ob_set_u(_event, L"url", event.url);
            
            ob_set_d(_event, L"endDate", event.endDate);
            ob_set_d(_event, L"occurrence", event.occurrence);
            ob_set_d(_event, L"startDate", event.startDate);
            ob_set_d(_event, L"dateStamp", event.dateStamp);
            
            ob_set_b(_event, L"isAllDay", event.isAllDay);
            ob_set_b(_event, L"isDetached", event.isDetached);
            
            if(with_calendar){
                ob_set_event_calendar(_event, event);
            }
            
            NSArray *alarms = [event alarms];
            
            if(alarms){
                
                PA_CollectionRef _alarms = PA_CreateCollection();
                
                for(unsigned int i = 0; i < [alarms count]; ++i)
                {
                    if([[alarms objectAtIndex:i]isMemberOfClass:[CalAlarm class]])
                    {
                        CalAlarm *alarm = [alarms objectAtIndex:i];
                        
                        PA_ObjectRef _alarm = PA_CreateObject();
                        
                        ob_set_v(_alarm, L"action", alarm.action);
                        ob_set_v(_alarm, L"emailAddress", alarm.emailAddress);
                        ob_set_v(_alarm, L"sound", alarm.sound);
                        ob_set_u(_alarm, L"url", alarm.url);
                        
                        if(alarm.relativeTrigger){
                            ob_set_n(_alarm, L"relativeTrigger", alarm.relativeTrigger);
                        }else{
                            ob_set_0(_alarm, L"relativeTrigger");
                        }
                        
                        ob_set_d(_alarm, L"absoluteTrigger", alarm.absoluteTrigger);
                        
                        PA_Variable v = PA_CreateVariable(eVK_Object);
                        PA_SetObjectVariable(&v, _alarm);
                        PA_SetCollectionElement(_alarms, PA_GetCollectionLength(_alarms), v);
                        PA_ClearVariable(&v);
                    }
                }
                
                ob_set_c(_event, L"alarms", _alarms);
            }
            
            NSArray *attendees = [event attendees];
            
            if(attendees){
                
                PA_CollectionRef _attendees = PA_CreateCollection();
                
                for(unsigned int i = 0; i < [attendees count]; ++i)
                {
                    if([[attendees objectAtIndex:i]isMemberOfClass:[CalAttendee class]])
                    {
                        CalAttendee *attendee = [attendees objectAtIndex:i];
                        
                        PA_ObjectRef _attendee = PA_CreateObject();
                        
                        ob_set_v(_attendee, L"status", attendee.status);
                        ob_set_v(_attendee, L"commonName", attendee.commonName);
                        
                        ob_set_u(_attendee, L"address", attendee.address);
                        
                        PA_Variable v = PA_CreateVariable(eVK_Object);
                        PA_SetObjectVariable(&v, _attendee);
                        PA_SetCollectionElement(_attendees, PA_GetCollectionLength(_attendees), v);
                        PA_ClearVariable(&v);
                    }
                }
                
                ob_set_c(_event, L"attendees", _attendees);
            }
            
            CalRecurrenceRule *recurrenceRule = event.recurrenceRule;
            
            if(recurrenceRule){
                
                PA_ObjectRef _recurrenceRule = PA_CreateObject();
                
                ob_set_n(_recurrenceRule, L"recurrenceInterval", recurrenceRule.recurrenceInterval);
                ob_set_n(_recurrenceRule, L"firstDayOfTheWeek", recurrenceRule.firstDayOfTheWeek);
                ob_set_n(_recurrenceRule, L"recurrenceType", recurrenceRule.recurrenceType);
                
                PA_ObjectRef _recurrenceEnd = PA_CreateObject();
                
                if(recurrenceRule.recurrenceEnd){
                    ob_set_b(_recurrenceEnd, L"usesEndDate", recurrenceRule.recurrenceEnd.usesEndDate);
                    ob_set_d(_recurrenceEnd, L"endDate", recurrenceRule.recurrenceEnd.endDate);
                    ob_set_n(_recurrenceEnd, L"occurrenceCount", recurrenceRule.recurrenceEnd.occurrenceCount);
                }
                
                ob_set_o(_recurrenceRule, L"recurrenceEnd", _recurrenceEnd);
                                
                if(recurrenceRule.daysOfTheWeek){
                    PA_CollectionRef _daysOfTheWeek = PA_CreateCollection();
                    for(unsigned int i = 0; i < [recurrenceRule.daysOfTheWeek count]; ++i)
                    {
                        PA_Variable v = PA_CreateVariable(eVK_Longint);
                        PA_SetLongintVariable(&v, (PA_long32)[(NSNumber *)[recurrenceRule.daysOfTheWeek objectAtIndex:i]intValue]);
                        PA_SetCollectionElement(_daysOfTheWeek, PA_GetCollectionLength(_daysOfTheWeek), v);
                        PA_ClearVariable(&v);
                    }
                    ob_set_c(_recurrenceRule, L"daysOfTheWeek", _daysOfTheWeek);
                }
                
                if(recurrenceRule.daysOfTheMonth){
                    PA_CollectionRef _daysOfTheMonth = PA_CreateCollection();
                    for(unsigned int i = 0; i < [recurrenceRule.daysOfTheMonth count]; ++i)
                    {
                        PA_Variable v = PA_CreateVariable(eVK_Longint);
                        PA_SetLongintVariable(&v, (PA_long32)[(NSNumber *)[recurrenceRule.daysOfTheMonth objectAtIndex:i]intValue]);
                        PA_SetCollectionElement(_daysOfTheMonth, PA_GetCollectionLength(_daysOfTheMonth), v);
                        PA_ClearVariable(&v);
                    }
                    ob_set_c(_recurrenceRule, L"daysOfTheMonth", _daysOfTheMonth);
                }
                
                if(recurrenceRule.nthWeekDaysOfTheMonth){
                    PA_CollectionRef _nthWeekDaysOfTheMonth = PA_CreateCollection();
                    for(unsigned int i = 0; i < [recurrenceRule.nthWeekDaysOfTheMonth count]; ++i)
                    {
                        PA_Variable v = PA_CreateVariable(eVK_Object);
                        
                        PA_ObjectRef _nthWeekDay = PA_CreateObject();
                        CalNthWeekDay *nthWeekDay = [recurrenceRule.nthWeekDaysOfTheMonth objectAtIndex:i];
                        ob_set_n(_nthWeekDay, L"dayOfTheWeek", nthWeekDay.dayOfTheWeek);
                        ob_set_n(_nthWeekDay, L"weekNumber", nthWeekDay.weekNumber);
                        
                        PA_SetObjectVariable(&v, _nthWeekDay);
                        
                        PA_SetCollectionElement(_nthWeekDaysOfTheMonth, PA_GetCollectionLength(_nthWeekDaysOfTheMonth), v);
                        PA_ClearVariable(&v);
                    }
                    ob_set_c(_recurrenceRule, L"nthWeekDaysOfTheMonth", _nthWeekDaysOfTheMonth);
                }
                
                if(recurrenceRule.monthsOfTheYear){
                    PA_CollectionRef _monthsOfTheYear = PA_CreateCollection();
                    for(unsigned int i = 0; i < [recurrenceRule.monthsOfTheYear count]; ++i)
                    {
                        PA_Variable v = PA_CreateVariable(eVK_Longint);
                        PA_SetLongintVariable(&v, (PA_long32)[(NSNumber *)[recurrenceRule.monthsOfTheYear objectAtIndex:i]intValue]);
                        PA_SetCollectionElement(_monthsOfTheYear, PA_GetCollectionLength(_monthsOfTheYear), v);
                        PA_ClearVariable(&v);
                    }
                    ob_set_c(_recurrenceRule, L"monthsOfTheYear", _monthsOfTheYear);
                }

                ob_set_o(_event, L"recurrenceRule", _recurrenceRule);
            }
        }
    }
}

void ob_set_error(PA_ObjectRef status, NSError *error) {
    
    if(status){
        if(error){
            ob_set_b(status, L"success", false);

            PA_ObjectRef _error = PA_CreateObject();
            
            ob_set_n(_error, L"code", error.code);
            ob_set_v(_error, L"localizedDescription", error.localizedDescription);
            ob_set_v(_error, L"localizedRecoverySuggestion", error.localizedRecoverySuggestion);
            ob_set_o(status, L"error", _error);
        }
    }
}

void ob_add_event(PA_CollectionRef _events, CalEvent *event) {

    if(_events){
        if(event){
            PA_ObjectRef _event = PA_CreateObject();
            ob_copy_event(_event, event);
                        
            PA_Variable v = PA_CreateVariable(eVK_Object);
            PA_SetObjectVariable(&v, _event);
            PA_SetCollectionElement(_events, PA_GetCollectionLength(_events), v);
            PA_ClearVariable(&v);
        }
    }
}

void ob_set_event(PA_ObjectRef status, CalEvent *event) {
    
    if(status){
        if(event){
            PA_ObjectRef _event = PA_CreateObject();
            ob_copy_event(_event, event);
            
            ob_set_o(status, L"event", _event);
        }
    }
}

#pragma mark Event

void iCal_Create_event(PA_PluginParameters params) {
    
    PA_ObjectRef status = PA_CreateObject();
    
    if(check_permission(status)) {
        CalCalendarStore *defaultCalendarStore = [CalCalendarStore defaultCalendarStore];
        if(defaultCalendarStore) {
            PA_ObjectRef options = PA_GetObjectParameter(params, 1);
            if(options){
                
                PA_ObjectRef c = ob_get_o(options, L"calendar");
                
                if(c){
                    CalCalendar *calendar = ob_get_calendar(c, defaultCalendarStore);
                    if(calendar){
                        
                        CalEvent *event = [CalEvent event];
                        
                        event.calendar = calendar;
                        
                        ob_set_event_prop(status, options, event);
                        
                        NSError *error = nil;
                        if([defaultCalendarStore saveEvent:event span:CalSpanThisEvent error:&error]){
                            
                            ob_set_b(status, L"success", true);
                            ob_set_event(status, event);
                            
                        }else{
                            ob_set_error(status, error);
                        }
                    }else{
                        ob_set_b(status, L"success", false);
                        ob_set_s(status, L"errorMessage", "invalid calendar");
                    }
                }else{
                    ob_set_b(status, L"success", false);
                    ob_set_s(status, L"errorMessage", "calendar option is missing");
                }
            }else{
                ob_set_b(status, L"success", false);
                ob_set_s(status, L"errorMessage", "option is missing");
            }
        }
    }
    PA_ReturnObject(params, status);
}

void iCal_Set_event_property(PA_PluginParameters params) {
    
    PA_ObjectRef status = PA_CreateObject();
    
    if(check_permission(status)) {
        CalCalendarStore *defaultCalendarStore = [CalCalendarStore defaultCalendarStore];
        if(defaultCalendarStore) {
            PA_ObjectRef options = PA_GetObjectParameter(params, 1);
            if(options){
    
                CalEvent *event = ob_get_event(options, defaultCalendarStore);
                
                if(event){
                    
                    PA_ObjectRef c = ob_get_o(options, L"calendar");
                    
                    if(c){
                        CalCalendar *calendar = ob_get_calendar(c, defaultCalendarStore);
                        if(calendar){
                            event.calendar = calendar;
                        }
                    }
                    
                    ob_set_event_prop(status, options, event);

                    NSError *error = nil;
                    if([defaultCalendarStore saveEvent:event span:CalSpanThisEvent error:&error]){
                        
                        ob_set_b(status, L"success", true);
                        ob_set_event(status, event);
                        
                    }else{
                        ob_set_error(status, error);
                    }
                }else{
                    ob_set_b(status, L"success", false);
                    ob_set_s(status, L"errorMessage", "invalid event");
                }
                
            }else{
                ob_set_b(status, L"success", false);
                ob_set_s(status, L"errorMessage", "option is missing");
            }
        }
    }
    PA_ReturnObject(params, status);
}

void iCal_Get_event_property(PA_PluginParameters params) {
    
    PA_ObjectRef status = PA_CreateObject();
    
    if(check_permission(status)) {
        CalCalendarStore *defaultCalendarStore = [CalCalendarStore defaultCalendarStore];
        if(defaultCalendarStore) {
            PA_ObjectRef options = PA_GetObjectParameter(params, 1);
            if(options){
    
                CalEvent *event = ob_get_event(options, defaultCalendarStore);
                
                if(event){
                    
                    ob_set_b(status, L"success", true);
                    ob_set_event(status, event);
                                        
                }else{
                    ob_set_b(status, L"success", false);
                    ob_set_s(status, L"errorMessage", "invalid event");
                }
                
            }else{
                ob_set_b(status, L"success", false);
                ob_set_s(status, L"errorMessage", "option is missing");
            }
        }
    }
    PA_ReturnObject(params, status);
}

void iCal_Remove_event(PA_PluginParameters params) {
    
    PA_ObjectRef status = PA_CreateObject();
    
    if(check_permission(status)) {
        CalCalendarStore *defaultCalendarStore = [CalCalendarStore defaultCalendarStore];
        if(defaultCalendarStore) {
            PA_ObjectRef options = PA_GetObjectParameter(params, 1);
            if(options){
    
                CalEvent *event = ob_get_event(options, defaultCalendarStore);
                
                if(event){
                    
                    NSError *error = nil;
                    if([defaultCalendarStore removeEvent:event span:CalSpanAllEvents error:&error]){
                        ob_set_b(status, L"success", true);
                    }else{
                        ob_set_error(status, error);
                    }
                }else{
                    ob_set_b(status, L"success", false);
                    ob_set_s(status, L"errorMessage", "invalid event");
                }
                
            }else{
                ob_set_b(status, L"success", false);
                ob_set_s(status, L"errorMessage", "option is missing");
            }
        }
    }
    PA_ReturnObject(params, status);
}

#pragma mark Calendar

void iCal_Create_calendar(PA_PluginParameters params) {
    
    PA_ObjectRef status = PA_CreateObject();
    
    if(check_permission(status)) {
        CalCalendarStore *defaultCalendarStore = [CalCalendarStore defaultCalendarStore];
        if(defaultCalendarStore) {
            PA_ObjectRef options = PA_GetObjectParameter(params, 1);
            if(options){
                
                CalCalendar *calendar = [CalCalendar calendar];
                
                NSString *title = ob_get_v(options, L"title");
                
                if(title){
                    calendar.title = title;
                    [title release];
                }

                NSString *notes = ob_get_v(options, L"notes");
                
                if(notes){
                    calendar.notes = notes;
                    [notes release];
                }
                
                if(ob_is_defined(options, L"color")){
                    calendar.color = getRGBcolor(ob_get_n(options, L"color"));
                }
                
                NSError *error = nil;
                
                if([defaultCalendarStore saveCalendar:calendar error:&error]) {
                    
                    ob_set_b(status, L"success", true);
                    
                    PA_ObjectRef _calendar = PA_CreateObject();

                    ob_set_v(_calendar, L"title", calendar.title);
                    ob_set_v(_calendar, L"uid", calendar.uid);
                    ob_set_v(_calendar, L"notes", calendar.notes);
                    ob_set_v(_calendar, L"type", calendar.type);
                    
                    ob_set_b(_calendar, L"isEditable", calendar.isEditable);
                    ob_set_n(_calendar, L"color", calendar.color ? getColorRGB(calendar.color) : 0L);

                    ob_set_o(status, L"calendar", _calendar);

                }else{
                    ob_set_error(status, error);
                }
            }else{
                ob_set_b(status, L"success", false);
                ob_set_s(status, L"errorMessage", "option is missing");
            }
        }
    }
    
    PA_ReturnObject(params, status);
}

void iCal_Set_calendar_property(PA_PluginParameters params) {
    
    PA_ObjectRef status = PA_CreateObject();
    
    if(check_permission(status)) {
        CalCalendarStore *defaultCalendarStore = [CalCalendarStore defaultCalendarStore];
        if(defaultCalendarStore) {
            PA_ObjectRef options = PA_GetObjectParameter(params, 1);
            if(options){
                CalCalendar *calendar = ob_get_calendar(options, defaultCalendarStore);
                if(calendar){
                    
                    NSString *title = ob_get_v(options, L"title");
                    
                    if(title){
                        calendar.title = title;
                        [title release];
                    }
                    
                    NSString *notes = ob_get_v(options, L"notes");
                    
                    if(notes){
                        calendar.notes = notes;
                        [notes release];
                    }
                    
                    if(ob_is_defined(options, L"color")){
                        calendar.color = getRGBcolor(ob_get_n(options, L"color"));
                    }
                    
                    NSError *error = nil;
                    
                    if([defaultCalendarStore saveCalendar:calendar error:&error]) {
                        
                        ob_set_b(status, L"success", true);
                        
                        PA_ObjectRef _calendar = PA_CreateObject();
                        
                        ob_set_v(_calendar, L"title", calendar.title);
                        ob_set_v(_calendar, L"uid", calendar.uid);
                        ob_set_v(_calendar, L"notes", calendar.notes);
                        ob_set_v(_calendar, L"type", calendar.type);
                        
                        ob_set_b(_calendar, L"isEditable", calendar.isEditable);
                        ob_set_n(_calendar, L"color", calendar.color ? getColorRGB(calendar.color) : 0L);
                        
                        ob_set_o(status, L"calendar", _calendar);
                        
                    }else{
                        ob_set_error(status, error);
                    }
                }else{
                    ob_set_b(status, L"success", false);
                    ob_set_s(status, L"errorMessage", "invalid calendar");
                }
            }else{
                ob_set_b(status, L"success", false);
                ob_set_s(status, L"errorMessage", "option is missing");
            }
        }
    }
    
    PA_ReturnObject(params, status);
}

void iCal_Get_calendar_property(PA_PluginParameters params) {
    
    PA_ObjectRef status = PA_CreateObject();
    
    if(check_permission(status)) {
        CalCalendarStore *defaultCalendarStore = [CalCalendarStore defaultCalendarStore];
        if(defaultCalendarStore) {
            PA_ObjectRef options = PA_GetObjectParameter(params, 1);
            if(options){
                CalCalendar *calendar = ob_get_calendar(options, defaultCalendarStore);
                if(calendar){
                    
                    PA_ObjectRef _calendar = PA_CreateObject();

                    ob_set_v(_calendar, L"title", calendar.title);
                    ob_set_v(_calendar, L"uid", calendar.uid);
                    ob_set_v(_calendar, L"notes", calendar.notes);
                    ob_set_v(_calendar, L"type", calendar.type);
                    
                    ob_set_b(_calendar, L"isEditable", calendar.isEditable);
                    ob_set_n(_calendar, L"color", calendar.color ? getColorRGB(calendar.color) : 0L);

                    ob_set_o(status, L"calendar", _calendar);
                }else{
                    ob_set_b(status, L"success", false);
                    ob_set_s(status, L"errorMessage", "invalid calendar");
                }
            }else{
                ob_set_b(status, L"success", false);
                ob_set_s(status, L"errorMessage", "option is missing");
            }
        }
    }
    
    PA_ReturnObject(params, status);
}

void iCal_Remove_calendar(PA_PluginParameters params) {
    
    PA_ObjectRef status = PA_CreateObject();
    
    if(check_permission(status)) {
        CalCalendarStore *defaultCalendarStore = [CalCalendarStore defaultCalendarStore];
        if(defaultCalendarStore) {
            PA_ObjectRef options = PA_GetObjectParameter(params, 1);
            if(options){
                CalCalendar *calendar = ob_get_calendar(options, defaultCalendarStore);
                if(calendar){
                    NSError *error = nil;
                    if([defaultCalendarStore removeCalendar:calendar error:&error]){
                        ob_set_b(status, L"success", true);
                    }else{
                        ob_set_error(status, error);
                    }
                }else{
                    ob_set_b(status, L"success", false);
                    ob_set_s(status, L"errorMessage", "invalid calendar");
                }
            }else{
                ob_set_b(status, L"success", false);
                ob_set_s(status, L"errorMessage", "option is missing");
            }
        }
    }
    
    PA_ReturnObject(params, status);
}

#pragma mark Calendar Store

void iCal_QUERY_EVENT(PA_PluginParameters params) {
    
    PA_ObjectRef status = PA_CreateObject();
    
    if(check_permission(status)) {
        CalCalendarStore *defaultCalendarStore = [CalCalendarStore defaultCalendarStore];
        if(defaultCalendarStore) {
            
            PA_CollectionRef _events = PA_CreateCollection();
            
            PA_ObjectRef options = PA_GetObjectParameter(params, 1);
            if(options){
                
                NSDate *startDate = ob_get_d(options, L"startDate");
                NSDate *endDate = ob_get_d(options, L"endDate");
                
                if(startDate){
                    if(endDate){
                        NSArray *calendars = ob_get_calendars(options, defaultCalendarStore);
                        
                        if(calendars){
                            
                            NSPredicate *predicate = [CalCalendarStore eventPredicateWithStartDate:startDate
                                                                                           endDate:endDate
                                                                                         calendars:calendars];
                            if(predicate){
                                NSArray *events = [defaultCalendarStore eventsWithPredicate:predicate];
                                
                                time_t startTime = time(0);
                                
                                for(unsigned int i = 0; i < [events count]; ++i) {
                                    
                                    time_t now = time(0);
                                    time_t elapsedTime = abs(startTime - now);
                                    if(elapsedTime > 0)
                                    {
                                        startTime = now;
                                        PA_YieldAbsolute();
                                    }
                                    if([[events objectAtIndex:i]isMemberOfClass:[CalEvent class]]) {
                                        
                                        CalEvent *event = [events objectAtIndex:i];
                                        ob_add_event(_events, event);
                        
                                    }
                                }
                                ob_set_c(status, L"events", _events);
                            }else{
                                ob_set_b(status, L"success", false);
                                ob_set_s(status, L"errorMessage", "invalid predicate");
                            }
                        }else{
                            ob_set_b(status, L"success", false);
                            ob_set_s(status, L"errorMessage", "invalid calendars");
                        }
                    }else{
                        ob_set_b(status, L"success", false);
                        ob_set_s(status, L"errorMessage", "invalid endDate");
                    }
                }else{
                    ob_set_b(status, L"success", false);
                    ob_set_s(status, L"errorMessage", "invalid startDate");
                }
            }
        }
    }
    PA_ReturnObject(params, status);
}

void iCal_GET_CALENDAR_LIST(PA_PluginParameters params) {
    
    PA_ObjectRef status = PA_CreateObject();
    
    if(check_permission(status)) {
        CalCalendarStore *defaultCalendarStore = [CalCalendarStore defaultCalendarStore];
        if(defaultCalendarStore) {
            
            PA_CollectionRef _calendars = PA_CreateCollection();
            
            NSArray *calendars = [defaultCalendarStore calendars];
            for(unsigned int i = 0; i < [calendars count]; ++i) {

                if([[calendars objectAtIndex:i]isMemberOfClass:[CalCalendar class]]) {
                    
                    CalCalendar *calendar = [calendars objectAtIndex:i];

                    PA_ObjectRef _calendar = PA_CreateObject();

                    ob_set_v(_calendar, L"title", calendar.title);
                    ob_set_v(_calendar, L"uid", calendar.uid);
                    ob_set_v(_calendar, L"notes", calendar.notes);
                    ob_set_v(_calendar, L"type", calendar.type);

                    ob_set_b(_calendar, L"isEditable", calendar.isEditable);
                    ob_set_n(_calendar, L"color", calendar.color ? getColorRGB(calendar.color) : 0L);

                    PA_Variable v = PA_CreateVariable(eVK_Object);
                    PA_SetObjectVariable(&v, _calendar);
                    PA_SetCollectionElement(_calendars, PA_GetCollectionLength(_calendars), v);
                    PA_ClearVariable(&v);
 
                }
                
            }//[calendars count]
            
            ob_set_c(status, L"calendars", _calendars);
            
        }//defaultCalendarStore
    }
    
    PA_ReturnObject(params, status);
}

#pragma GCC diagnostic pop
